name: $(Date:yyyy.M.d)$(Rev:.r)

trigger:
  - master

pr: none

variables:
  - name: NodeVersion
    value: 22.x
  - name: pnpm_config_cache
    value: $(Pipeline.Workspace)/.pnpm-store

jobs:
  - job: publish_repo_content
    displayName: Publish repo content
    workspace:
      clean: all
    pool:
      vmImage: ubuntu-latest
    steps:
      - checkout: self
        fetchDepth: 1
        fetchTags: false

      - task: CopyFiles@2
        displayName: "Copy Files to staging directory"
        inputs:
          Contents: |
            **
            !.git/**
          TargetFolder: "$(Build.ArtifactStagingDirectory)"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: presentation-rules-editor-repo"
        inputs:
          ArtifactName: presentation-rules-editor-repo

  - job: build_publish_app
    displayName: Build & publish app
    workspace:
      clean: all
    pool:
      vmImage: ubuntu-latest
    steps:
      - checkout: self
        fetchDepth: 1
        fetchTags: false

      - task: UseNode@1
        displayName: "Use Node $(NodeVersion)"
        inputs:
          version: $(NodeVersion)

      - task: Cache@2
        displayName: Cache pnpm
        inputs:
          key: 'pnpm | "$(Agent.OS)" | pnpm-lock.yaml'
          path: $(pnpm_config_cache)

      - script: corepack enable
        displayName: "Enable corepack"

      - script: pnpm config set store-dir $(pnpm_config_cache)
        displayName: "Setup pnpm"
        env:
          COREPACK_INTEGRITY_KEYS: 0

      - script: pnpm install --filter @app/frontend...

      - script: npm run build
        env:
          OAUTH_CLIENT_ID: "#{App.ClientId}"
          IMJS_URL_PREFIX: "#{App.UrlPrefix}"
          APPLICATION_INSIGHTS_CONNECTION_STRING: "#{App.AppInsightsConnectionString}"
        displayName: Bundle

      - task: octopusdeploy.octopus-deploy-build-release-tasks.octopus-pack-nuget.OctopusPackNuGet@6
        displayName: Package presentation-rules-editor-static
        inputs:
          PackageId: presentation-rules-editor-static
          PackageVersion: $(Build.BuildNumber)
          SourcePath: app/frontend/dist
          OutputPath: $(Build.ArtifactStagingDirectory)
          NuGetDescription: Presentation rules editor static web site
          NuGetAuthors: Bentley Systems, Inc.

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: presentation-rules-editor-static"
        inputs:
          PathtoPublish: $(Build.ArtifactStagingDirectory)/presentation-rules-editor-static.$(Build.BuildNumber).nupkg
          ArtifactName: presentation-rules-editor-static

  - job: threagile
    displayName: Run Threagile
    pool:
      vmImage: ubuntu-latest
    variables:
      - name: ModelsDirectory
        value: "$(Build.SourcesDirectory)/.threat-model"
      - name: ThreagileModelFilename
        value: "threagile.yaml"
      - name: ThreagileVersion
        value: "1.4.0"
    steps:
      - task: UniversalPackages@0
        displayName: Download threagile image
        inputs:
          command: download
          vstsFeed: "AppSec/AppSec"
          vstsFeedPackage: "threagile-$(ThreagileVersion)"
          vstsPackageVersion: "*"
          downloadDirectory: "$(Build.SourcesDirectory)"

      - bash: |
          docker load -i '$(Build.SourcesDirectory)/threagile-$(ThreagileVersion).tar'
        displayName: "Load threagile docker image"

      - bash: |
          chmod a+rwx $(Build.ArtifactStagingDirectory)
        displayName: "Set permissions on output directory"

      - pwsh: >
          docker run --rm
          --volume "$(ModelsDirectory):/app/models"
          --volume "$(Build.ArtifactStagingDirectory):/app/output"
          threagile:$(ThreagileVersion)
          -verbose
          -model /app/models/$(ThreagileModelFilename)
          -output /app/output
        displayName: "Run Threagile model"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: threagile-output"
        inputs:
          ArtifactName: threagile-output
